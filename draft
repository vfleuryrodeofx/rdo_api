package main

import (
	"crypto/rand"
	"database/sql"
	"encoding/hex"
	"fmt"
	"net/http"
	"slices"
	"strings"

	"github.com/gin-gonic/gin"
	_ "github.com/mattn/go-sqlite3"
)

var tokens []string
var DB *sql.DB

// ApiMiddleware will add the db connection to the context
func ApiMiddleware(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Set("databaseConn", db)
		c.Next()
	}
}

func Connect() error {
	db, err := sql.Open("sqlite3", "shotgun_creds.db")
	if err != nil {
		panic(fmt.Sprintf("Could not connect to Database : %s", err))
	}
	DB = db
	return nil
}

func main() {
	r := gin.Default()

	r.Use(ApiMiddleware(DB))
	r.POST("/login", gin.BasicAuth(gin.Accounts{
		"admin": "secret",
	}), func(c *gin.Context) {
		token, _ := randomHex(20)
		tokens = append(tokens, token)

		c.JSON(http.StatusOK, gin.H{
			"token": token,
		})
	})
	r.GET("/info", func(c *gin.Context) {
		//bearerToken := c.Request.Header.Get("Authorization")
		//if bearerToken == "" {
		//c.JSON(http.StatusUnauthorized, gin.H{"message": "unauthorized"})
		//return
		//}
		//reqToken := strings.Split(bearerToken, " ")[1]
		//if !slices.Contains(tokens, reqToken) {
		//c.JSON(http.StatusUnauthorized, gin.H{"message": "unauthorized"})
		//return
		//}
		databaseVersion := fetchDBVersion()
		c.JSON(http.StatusOK, gin.H{"message": databaseVersion})
	})
	r.GET("/setup", func(c *gin.Context) {
		bearerToken := c.Request.Header.Get("Authorization")
		if bearerToken == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"message": "unauthorized"})
			return
		}
		reqToken := strings.Split(bearerToken, " ")[1]
		if !slices.Contains(tokens, reqToken) {
			c.JSON(http.StatusUnauthorized, gin.H{"message": "unauthorized"})
			return
		}
		success := setupDB()
		c.JSON(http.StatusOK, gin.H{"creation": success})
	})
	r.GET("/get", func(c *gin.Context) {
		bearerToken := c.Request.Header.Get("Authorization")
		if bearerToken == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"message": "unauthorized"})
			return
		}
		reqToken := strings.Split(bearerToken, " ")[1]
		if !slices.Contains(tokens, reqToken) {
			c.JSON(http.StatusUnauthorized, gin.H{"message": "unauthorized"})
			return
		}
		query_script_name := c.DefaultQuery("script_name", "Guest")
		script_name, api_key := fetchFromDB(query_script_name)
		c.JSON(http.StatusOK, gin.H{"script_name": script_name, "api_key": api_key})
	})

	r.Run("localhost:8088") // Listen and serve on 0.0.0.0:8080 (for Windows "localhost:8080")
}

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

func fetchDBVersion() string {
	//db, err := sql.Open("sqlite3", "shotgun_creds.db")
	//if err != nil {
	//panic(err)
	//}
	//defer db.Close()

	var version string
	err := DB.QueryRow("SELECT SQLITE_VERSION()").Scan(&version)

	if err != nil {
		panic(err)
	}

	return version
}

type ShotgunCreds struct {
	id          int
	script_name string
	api_key     string
}

func setupDB() bool {
	db, err := sql.Open("sqlite3", "shotgun_creds.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	statement, err := db.Prepare("CREATE TABLE IF NOT EXISTS credentials(id INTEGER PRIMARY KEY, script_name VARCHAR(64), api_key VARCHAR(64))")
	if err != nil {
		fmt.Println("Error in creating table")
	} else {
		fmt.Println("Successfully created table books!")
	}
	statement.Exec()

	return true
}

func fetchFromDB(script_name string) (string, string) {
	db, err := sql.Open("sqlite3", "shotgun_creds.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	query := fmt.Sprintf("SELECT id, script_name, api_key FROM credentials WHERE script_name='%s';", script_name)
	rows, _ := db.Query(query)
	defer rows.Close()
	var creds ShotgunCreds
	for rows.Next() {
		rows.Scan(&creds.id, &creds.script_name, &creds.api_key)
	}
	return creds.script_name, creds.api_key
}
